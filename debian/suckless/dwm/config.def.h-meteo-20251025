/* See LICENSE file for copyright and license details. */

/* appearance */
static const unsigned int borderpx  = 2;        /* border pixel of windows */
static const unsigned int snap      = 32;       /* snap pixel */
static const unsigned int gappih    = 10;       /* horiz inner gap between windows */
static const unsigned int gappiv    = 10;       /* vert inner gap between windows */
static const unsigned int gappoh    = 10;       /* horiz outer gap between windows and screen edge */
static const unsigned int gappov    = 10;       /* vert outer gap between windows and screen edge */
static int smartgaps                 = 0;        /* 1 means no outer gap when there is only one window */
static const unsigned int systraypinning = 0;   /* 0: sloppy systray follows selected monitor, >0: pin systray to monitor X */
static const unsigned int systrayonleft  = 0;   /* 0: systray in the right corner, >0: systray on left of status text */
static const unsigned int systrayspacing = 4;   /* systray spacing */
static const int systraypinningfailfirst = 1;   /* 1: if pinning fails, display systray on the first monitor, False: display systray on the last monitor*/
static const int showsystray        = 1;        /* 0 means no systray */
static const int showbar            = 1;        /* 0 means no bar */
static const int topbar             = 1;        /* 0 means bottom bar */
static const int focusedontoptiled  = 1;        /* 1 means focused tile client is shown on top of floating windows */
static const char *fonts[]          = { "JetBrainsMono Nerd Font:size=12" };
static const char dmenufont[]       = "monospace:size=10";
static const char col_gray1[]       = "#00141d";
static const char col_gray2[]       = "#80bfff";
static const char col_gray3[]       = "#FFFFFF";
static const char col_gray4[]       = "#1a1a1a";
static const char col_cyan[]        = "#b3e5fc"; /* was #6CF982  */
static const char col_urgborder[]   = "#ff0000";
static const char col_barbie[]      = "#4fc3f7";
static const char *colors[][3]      = {
	/*               fg         bg         border   */
	[SchemeNorm] = { col_gray3, col_gray1, col_gray4 },
	[SchemeSel]  = { col_gray4, col_cyan,  col_barbie  },
	[SchemeUrg]  = { col_gray4, col_cyan,  col_urgborder  },
};

static const char *const autostart[] = {
	"sh", "-c", "~/.config/suckless/scripts/autostart.sh", NULL,
	NULL /* terminate */
};

/* tagging */
static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9", "10" };

static const Rule rules[] = {
	/* xprop(1):
	 *	WM_CLASS(STRING) = instance, class
	 *	WM_NAME(STRING) = title
	 */
	/* class                instance    title       tags mask     isfloating   iscentered   monitor    scratch key */
	{ "Gimp",               NULL,       NULL,       1 << 8,       0,           0,           -1,        0  },
  { "Inkscape",           NULL,       NULL,       1 << 7,       0,           0,           -1,        0  },
	{ "GitHub Desktop",     NULL,       NULL,       1 << 1,       0,           1,           -1,        0  },
	{ "Spotify",            NULL,       NULL,       1 << 9,       0,           0,           -1,        0  },
	{ "RMPC",               NULL,       NULL,       1 << 9,       0,           0,           -1,        0  },
	{ "discord",            NULL,       NULL,       1 << 6,       0,           0,           -1,        0  },
	{ "mpv",                NULL,       NULL,       0,            1,           1,           -1,        0  },
	{ "qimgv",              NULL,       NULL,       0,            1,           1,           -1,        0  },
	{ "Galculator",         NULL,       NULL,       0,            1,           1,           -1,        0  },
	{ "Transmission-gtk",   NULL,       NULL,       0,            1,           1,           -1,        0  },
	{ "Lxappearance",       NULL,       NULL,       0,            1,           1,           -1,        0  },
	{ "Pavucontrol",        NULL,       NULL,       0,            1,           1,           -1,        0  },
	{ "Thunar",             NULL,       NULL,       0,            0,           1,           -1,        0  },
	{ "st-256color",        NULL,   "scratchpad",   0,            1,           1,           -1,       's' },
	{ "st-256color",        NULL,   "pulsemixer",   0,            1,           1,           -1,       'a' },
	{ "st-256color",        NULL,     "ranger",     0,            1,           1,           -1,       'r' },
	{ "kitty",              NULL,     "rmpc",       0,            1,           0,           -1,       'm' },
	{ "kitty",              NULL,     "yazi",       0,            1,           0,           -1,       'y' },
  { "meteo-qt",           NULL, NULL, 0, 1, -1 }
};

/* window following */
#define WFACTIVE '>'
#define WFINACTIVE 'v'
#define WFDEFAULT WFACTIVE

/* layout(s) */
static const float mfact        = 0.50; /* factor of master area size [0.05..0.95] */
static const int nmaster        = 1;    /* number of clients in master area */
static const int resizehints    = 1;    /* 1 means respect size hints in tiled resizals */
static const int lockfullscreen = 1;    /* 1 will force focus on the fullscreen window */
static const int refreshrate    = 120;  /* refresh rate (per second) for client move/resize */

#define FORCE_VSPLIT 1  /* nrowgrid layout: force two clients to always split vertically */
#include "vanitygaps.c"

static const Layout layouts[] = {
	/* symbol     arrange function */
	{ "󰕴",      dwindle },                 /* first entry is default */
	{ "󰙀",      tile },
	{ "󰕬",      columnlayout },
	{ "󰕯",      centeredmaster },
	{ "󰕰",      NULL },                    /* no layout function means floating behavior */
	{ "󱒈",      bstack },
	{ "󰕭",      nrowgrid },
	{ "󱇙",      deck },
	{ "󰕫",      gaplessgrid },
	{ "󰪷",      spiral },
	{ "󰕮",      monocle },
	{ "󰝘",      grid },
	{ "󱒉",      bstackhoriz },            /* no keybinding */
	{ "󰕱",      centeredfloatingmaster },  /* no keybinding */
	{ "󱇚",      horizgrid },              /* no keybinding */
	{ NULL,      NULL },
};

/* key definitions */
#define MODKEY Mod4Mask
#define TAGKEYS(KEY,TAG) \
	{ MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
	{ MODKEY|ShiftMask,             KEY,      tag,            {.ui = 1 << TAG} }, \
	{ MODKEY|ControlMask|ShiftMask, KEY,      toggletag,      {.ui = 1 << TAG} },

/* helper for spawning shell commands in the pre dwm-5.0 fashion */
#define SHCMD(cmd) { .v = (const char*[]){ "/bin/sh", "-c", cmd, NULL } }

/* commands */
static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
static const char *termcmd[]  = { "st", NULL };
static const char *termcmd2[]  = { "wezterm", NULL };


/*First arg only serves to match against key in rules*/
static const char *scratchpadcmd[] = {"s", "st", "-t", "scratchpad", NULL};
static const char *pulsemixercmd[] = {"a", "st", "-t", "pulsemixer", "-e", "pulsemixer", NULL};
static const char *rangercmd[] = {"r", "st", "-t", "ranger", "-e", "ranger", NULL};
static const char *rmpccmd[] = {"m", "kitty", "-T", "rmpc", "-e", "rmpc", NULL};
static const char *yazicmd[] = {"y", "kitty", "-T", "yazi", "-e", "yazi", NULL};


#include <X11/XF86keysym.h>

#include "movestack.c"
static const Key keys[] = {
	/* modifier                     key        function        argument */
	{ MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
	{ MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
	{ MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd2 } },
	{ MODKEY|ShiftMask,             XK_t,      togglescratch,  {.v = scratchpadcmd } },
	{ MODKEY|ShiftMask,             XK_a,      togglescratch,  {.v = pulsemixercmd } },
	{ MODKEY,                       XK_r,      togglescratch,  {.v = rangercmd } },
  { MODKEY|ControlMask,           XK_m,      togglescratch,  {.v = rmpccmd } },
  { MODKEY|ControlMask,           XK_y,      togglescratch,  {.v = yazicmd } },
	{ MODKEY|ControlMask,           XK_b,      togglebar,      {0} },
	{ MODKEY,                       XK_Right,  focusstack,     {.i = +1 } },
	{ MODKEY,                       XK_Left,   focusstack,     {.i = -1 } },
	{ MODKEY|ControlMask,           XK_Left,   setmfact,       {.f = -0.05} },
	{ MODKEY|ControlMask,           XK_Right,  setmfact,       {.f = +0.05} },
	{ MODKEY|ShiftMask,             XK_Right,  movestack,      {.i = +1 } },
	{ MODKEY|ShiftMask,             XK_Left,   movestack,      {.i = -1 } },
	{ ControlMask|ShiftMask,        XK_Left,   viewtoleft,     {0} },
	{ ControlMask|ShiftMask,        XK_Right,  viewtoright,    {0} },
	{ Mod1Mask|ControlMask,         XK_Left,   tagtoleft,      {0} },
	{ Mod1Mask|ControlMask,         XK_Right,  tagtoright,     {0} },
	{ MODKEY,                       XK_Tab,    view,           {0} },
	{ MODKEY,                       XK_q,      killclient,     {0} },
	{ MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
	{ MODKEY,                       XK_0,      view,           {.ui = ~0 } },
	{ MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
	{ MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
	{ MODKEY,                       XK_period, focusmon,       {.i = +1 } },
	{ MODKEY|Mod1Mask|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
	{ MODKEY|Mod1Mask|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
	{ MODKEY|Mod1Mask,              XK_u,      incrgaps,       {.i = 1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_u,      incrgaps,       {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_i,      incrigaps,      {.i = 1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_i,      incrigaps,      {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_o,      incrogaps,      {.i = 1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_o,      incrogaps,      {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_6,      incrihgaps,     {.i = 1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_6,      incrihgaps,     {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_7,      incrivgaps,     {.i = 1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_7,      incrivgaps,     {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_8,      incrohgaps,     {.i = 1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_8,      incrohgaps,     {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_9,      incrovgaps,     {.i = 1 } },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_9,      incrovgaps,     {.i = -1 } },
	{ MODKEY|Mod1Mask,              XK_0,      togglegaps,     {0} },
	{ MODKEY|Mod1Mask|ShiftMask,    XK_0,      defaultgaps,    {0} },
	{ ShiftMask|ControlMask,           XK_1,      setlayout,     {.v = &layouts[0] } },
	{ ShiftMask|ControlMask,           XK_2,      setlayout,     {.v = &layouts[1] } },
	{ ShiftMask|ControlMask,           XK_3,      setlayout,     {.v = &layouts[2] } },
	{ ShiftMask|ControlMask,           XK_4,      setlayout,     {.v = &layouts[3] } },
	{ ShiftMask|ControlMask,           XK_5,      setlayout,     {.v = &layouts[4] } },
	{ ShiftMask|ControlMask,           XK_6,      setlayout,     {.v = &layouts[5] } },
	{ ShiftMask|ControlMask,           XK_7,      setlayout,     {.v = &layouts[6] } },
	{ ShiftMask|ControlMask,           XK_8,      setlayout,     {.v = &layouts[7] } },
	{ ShiftMask|ControlMask,           XK_9,      setlayout,     {.v = &layouts[8] } },
	{ ShiftMask|ControlMask,           XK_0,      setlayout,     {.v = &layouts[9] } },
	{ ShiftMask|ControlMask,           XK_minus,  setlayout,     {.v = &layouts[10] } },
	{ ShiftMask|ControlMask,           XK_equal,  setlayout,     {.v = &layouts[11] } },
	TAGKEYS(                        XK_1,                      0)
	TAGKEYS(                        XK_2,                      1)
	TAGKEYS(                        XK_3,                      2)
	TAGKEYS(                        XK_4,                      3)
	TAGKEYS(                        XK_5,                      4)
	TAGKEYS(                        XK_6,                      5)
	TAGKEYS(                        XK_7,                      6)
	TAGKEYS(                        XK_8,                      7)
	TAGKEYS(                        XK_9,                      8)
	TAGKEYS(                        XK_0,                      9)
/*	TAGKEYS(                        XK_minus,                  10) */
/*	TAGKEYS(                        XK_equal,                  11) */
	{ MODKEY|Mod1Mask|ShiftMask,    XK_Tab,    incnmaster,     {.i = +1 } },
	{ MODKEY|Mod1Mask,              XK_Tab,    incnmaster,     {.i = -1 } },
	{ MODKEY,                       XK_s,      togglesticky,   {0} },
	{ MODKEY|ShiftMask,             XK_f,      fullscreen,     {0} },
	{ MODKEY|ShiftMask,             XK_q,      quit,           {0} },
	{ MODKEY|ShiftMask,             XK_r,      quit,           {1} },
    { 0, XF86XK_MonBrightnessUp,   spawn, SHCMD("brightnessctl set +5%  && notify-send -u low -r 9999 'Brightness ↑' $(brightnessctl -m | cut -d, -f4)") },
    { 0, XF86XK_MonBrightnessDown, spawn, SHCMD("brightnessctl set 5%-  && notify-send -u low -r 9999 'Brightness ↓' $(brightnessctl -m | cut -d, -f4)") },
};

/* button definitions */
/* click can be ClkTagBar, ClkLtSymbol, ClkStatusText, ClkWinTitle, ClkClientWin, or ClkRootWin */
static const Button buttons[] = {
	/* click                event mask      button          function        argument */
	{ ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
	{ ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
	{ ClkFollowSymbol,      0,              Button1,        togglefollow,   {0} },
	{ ClkWinTitle,          0,              Button2,        zoom,           {0} },
	{ ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
	{ ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
	{ ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
	{ ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
	{ ClkTagBar,            0,              Button1,        view,           {0} },
	{ ClkTagBar,            0,              Button3,        toggleview,     {0} },
	{ ClkTagBar,            MODKEY,         Button1,        tag,            {0} },
	{ ClkTagBar,            MODKEY,         Button3,        toggletag,      {0} },
};
